'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/study-backend/docs/frame/php/','title':"PHP 框架",'content':"PHP 框架 "});index.add({'id':1,'href':'/study-backend/docs/mq/mqtt/mosquitto/','title':"mosquitto",'content':"mosquitto 物联网（Internet of Things，IoT）最近曝光率越来越高。虽然 HTTP 是网页的事实标准，不过机器之间（Machine-to-Machine，M2M）的大规模沟通需要不同的模式：之前的请求 / 回答（Request/Response）模式不再合适，取而代之的是发布 / 订阅（Publish/Subscribe）模式。这就是轻量级、可扩展的 MQTT（Message Queuing Telemetry Transport）可以施展拳脚的舞台。\nMQTT 是基于二进制消息的发布 / 订阅编程模式的消息协议，最早由 IBM 提出的，如今已经成为 OASIS 规范。由于规范很简单，非常适合需要低功耗和网络带宽有限的 IoT 场景，比如：\n 遥感数据 汽车 智能家居 智慧城市 医疗医护  安装 MacOS brew install mosquitto\n参考：https://mosquitto.org/download/\n"});index.add({'id':2,'href':'/study-backend/docs/api/rpc/grpc/','title':"gRPC",'content':"gRPC "});index.add({'id':3,'href':'/study-backend/docs/api/rpc/spring-cloud/','title':"Spring Cloud",'content':"Spring Cloud 国外 Pivotal 公司 2014 年对外开源的 RPC 框架，仅支持 Java 语言。\n"});index.add({'id':4,'href':'/study-backend/docs/api/rpc/dubbo/','title':"Dubbo",'content':"Dubbo 国内最早开源的 RPC 框架，由阿里巴巴公司开发并于 2011 年末对外开源，仅支持 Java 语言\n"});index.add({'id':5,'href':'/study-backend/docs/frame/python/','title':"Python 框架",'content':"Python 框架 "});index.add({'id':6,'href':'/study-backend/docs/db/redis/','title':"Redis",'content':"Redis "});index.add({'id':7,'href':'/study-backend/docs/mq/redis/','title':"Redis",'content':"Redis Kafka 是 linkedin 开源的 MQ 系统，主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，0.8 开始支持复制，不支持事务，适合产生大量数据的互联网服务的数据收集业务。\n"});index.add({'id':8,'href':'/study-backend/docs/api/webservice/soap/','title':"SOAP",'content':"SOAP "});index.add({'id':9,'href':'/study-backend/docs/auth/sso/','title':"SSO",'content':"SSO (Single sign-on) "});index.add({'id':10,'href':'/study-backend/docs/api/webservice/','title':"Web Service",'content':"Web Service "});index.add({'id':11,'href':'/study-backend/docs/api/rpc/','title':"数据库",'content':"数据库 "});index.add({'id':12,'href':'/study-backend/docs/db/','title':"数据库",'content':"数据库 "});index.add({'id':13,'href':'/study-backend/docs/auth/','title':"认证与授权",'content':"认证与授权 "});index.add({'id':14,'href':'/study-backend/docs/api/rpc/thrift/','title':"Thrift",'content':"Thrift 最初是由 Facebook 开发的内部系统跨语言的 RPC 框架，2007 年贡献给了 Apache 基金，成为 Apache 开源项目之一，支持多种语言。\n"});index.add({'id':15,'href':'/study-backend/docs/mq/activemq/','title':"ActiveMQ",'content':"ActiveMQ "});index.add({'id':16,'href':'/study-backend/docs/db/mysql/','title':"Mysql",'content':"Mysql "});index.add({'id':17,'href':'/study-backend/docs/mq/rocketmq/','title':"RocketMQ",'content':"RocketMQ "});index.add({'id':18,'href':'/study-backend/docs/frame/','title':"框架",'content':"后端框架 "});index.add({'id':19,'href':'/study-backend/docs/api/rpc/tars/','title':"Tars",'content':"Tars - Total Application Framework 腾讯内部使用的 RPC 框架，于 2017 年对外开源。\n目前支持 C++, Java 和 NodeJs 三种语言。\n"});index.add({'id':20,'href':'/study-backend/docs/mq/','title':"消息队列",'content':"消息队列 ZeroMQ 和 RabbitMQ/Kafka 不同，它只是一个异步消息库，在套接字的基础上提供了类似于消息代理的机制。使用 ZeroMQ 的话，需要对自己的业务代码进行改造，不利于服务解耦。\nRabbitMQ 支持 AMQP（二进制），STOMP（文本），MQTT（二进制），HTTP（里面包装其他协议）等协议。Kafka 使用自己的协议。\nKafka 自身服务和消费者都需要依赖 Zookeeper。\nRabbitMQ 在有大量消息堆积的情况下性能会下降，Kafka 不会。毕竟 AMQP 设计的初衷不是用来持久化海量消息的，而 Kafka 一开始是用来处理海量日志的。\n参考  RabbitMQ, ZeroMQ, Kafka 是一个层级的东西吗？  "});index.add({'id':21,'href':'/study-backend/docs/api/rpc/motan/','title':"Motan",'content':"Motan 微博内部使用的 RPC 框架，于 2016 年对外开源，仅支持 Java 语言。\n"});index.add({'id':22,'href':'/study-backend/docs/mq/rabbitmq/','title':"RabbitMQ",'content':"RabbitMQ RabbitMQ 是一个 AMQP 实现，传统的 messaging queue 系统实现，基于 Erlang。老牌 MQ 产品了。AMQP 协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量还在其次。\n"});index.add({'id':23,'href':'/study-backend/docs/mq/zeromq/','title':"ZeroMQ",'content':"ZeroMQ ZeroMQ 只是一个网络编程的 Pattern 库，将常见的网络请求形式（分组管理，链接管理，发布订阅等）模式化、组件化，简而言之 socket 之上、MQ 之下。对于 MQ 来说，网络传输只是它的一部分，更多需要处理的是消息存储、路由、Broker 服务发现和查找、事务、消费模式（ack、重投等）、集群服务等。\n"});index.add({'id':24,'href':'/study-backend/docs/mq/mqtt/','title':"MQTT",'content':"MQTT mqtt 各种 broker 如何选择？\nAgent 和 Broker 的差别是什么？\n 经纪人（Broker）：是为促成他人交易，充当订约居间人，为委托方提供订约的信息、机会和条件的主体。  Broker 是一个独立主体，但没有自主决策能力，只负责订约过程。   代理人（Agent）：是行使被代理者的权力，完成相关的使命或者任务主体。  Agent 是一个独立主体，负责完成任务但不负责执行任务，Agent 具有一定的自主决策能力，如对服务请求的选择。   代理（Proxy）是指行为代理，不是一个主体。  Proxy 是完全的传递者，如请求和响应的转发，操作控制的传递。    "});index.add({'id':25,'href':'/study-backend/categories/','title':"Categories",'content':""});index.add({'id':26,'href':'/study-backend/docs/','title':"Docs",'content':""});index.add({'id':27,'href':'/study-backend/tags/','title':"Tags",'content':""});index.add({'id':28,'href':'/study-backend/','title':"首页",'content':""});})();